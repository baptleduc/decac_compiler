parser grammar DecaParser;

options {
    // Default language but name it anyway
    //
    language  = Java;

    // Use a superclass to implement all helper
    // methods, instance variables and overrides
    // of ANTLR default methods, such as error
    // handling.
    //
    superClass = AbstractDecaParser;

    // Use the vocabulary generated by the accompanying
    // lexer. Maven knows how to work out the relationship
    // between the lexer and parser and will build the
    // lexer before the parser. It will also rebuild the
    // parser if the lexer changes.
    //
    tokenVocab = DecaLexer;

}

// which packages should be imported?
@header {
    import fr.ensimag.deca.tree.*;
    import java.io.PrintStream;
}

@members {
    @Override
    protected AbstractProgram parseProgram() {
        return prog().tree;
    }
}

prog returns[AbstractProgram tree]
    : list_classes main EOF {
            assert($list_classes.tree != null);
            assert($main.tree != null);
            $tree = new Program($list_classes.tree, $main.tree);
            setLocation($tree, $list_classes.start);
        }
    ;

main returns[AbstractMain tree]
    : /* epsilon */ {
            $tree = new EmptyMain();
        }
    | block {
            assert($block.decls != null);
            assert($block.insts != null);
            $tree = new Main($block.decls, $block.insts);
            setLocation($tree, $block.start);
        }
    ;

block returns[ListDeclVar decls, ListInst insts]
    : OBRACE list_decl list_inst CBRACE {
            assert($list_decl.tree != null);
            assert($list_inst.tree != null);
            $decls = $list_decl.tree;
            $insts = $list_inst.tree;
        }
    ;

list_decl returns[ListDeclVar tree]
@init   {
            $tree = new ListDeclVar();
        }
    : decl_var_set[$tree]*
    ;

decl_var_set[ListDeclVar l]
    : type list_decl_var[$l,$type.tree] SEMI
    ;

list_decl_var[ListDeclVar l, AbstractIdentifier t]
    : dv1=decl_var[$t] {
        $l.add($dv1.tree);
        } (COMMA dv2=decl_var[$t] {
            $l.add($dv2.tree);
        }
      )*
    ;

decl_var[AbstractIdentifier t] returns[AbstractDeclVar tree]
@init   {
            AbstractInitialization init_tree = new NoInitialization();
        }
    : i=ident {
        setLocation(init_tree, $i.start);
        $tree = new DeclVar(t, $i.tree, init_tree);
        setLocation($tree, $i.start);
        }
      (EQUALS e=expr {
        assert($e.tree != null);
        init_tree = new Initialization($e.tree);
        setLocation(init_tree, $e.start);
        $tree = new DeclVar(t, $i.tree, init_tree);
        setLocation($tree, $e.start);
        }
      )? {
        }
    ;

list_inst returns[ListInst tree]
@init {
    $tree = new ListInst();
}
    : (i=inst {
        $tree.add($i.tree);
        }
      )*
    ;

inst returns[AbstractInst tree]
    : e1=expr SEMI {
            assert($e1.tree != null);
            $tree = $e1.tree;
        }
    | SEMI {
            $tree = new NoOperation();
            setLocation($tree, $SEMI);
        }
    | PRINT OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Print(false, $list_expr.tree);
            setLocation($tree, $PRINT);
        }
    | PRINTLN OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Println(false, $list_expr.tree);
            setLocation($tree, $PRINTLN);
        }
    | PRINTX OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Print(true, $list_expr.tree);
            setLocation($tree, $PRINTX);
        }
    | PRINTLNX OPARENT list_expr CPARENT SEMI {
            assert($list_expr.tree != null);
            $tree = new Println(true, $list_expr.tree);
            setLocation($tree, $PRINTLNX);
        }
    | if_then_else {
            assert($if_then_else.tree != null);
            $tree = $if_then_else.tree;
            setLocation($tree, $if_then_else.start);
        }
    | WHILE OPARENT condition=expr CPARENT OBRACE body=list_inst CBRACE {
            assert($condition.tree != null);
            assert($body.tree != null);
            $tree = new While($condition.tree, $body.tree);
            setLocation($tree, $WHILE);
        }
    | RETURN ret=expr SEMI {
            assert($expr.tree != null);
            $tree = new Return($ret.tree);
            setLocation($tree, $RETURN);
        }
    ;

if_then_else returns[IfThenElse tree]
@init {
    ListInst else_tree = new ListInst();
}
    : if1=IF OPARENT condition=expr CPARENT OBRACE li_if=list_inst CBRACE {
        assert($condition.tree != null);
        $tree = new IfThenElse($condition.tree, $li_if.tree, else_tree);
        setLocation($tree, $if1);
        }
      (ELSE elsif=IF OPARENT elsif_cond=expr CPARENT OBRACE elsif_li=list_inst CBRACE {
        assert($elsif_cond.tree != null);
        IfThenElse treeElseIf = new IfThenElse($elsif_cond.tree, $list_inst.tree, new ListInst());     
        setLocation(treeElseIf, $elsif);
        else_tree.add(treeElseIf);
        }
      )*
      (ELSE OBRACE li_else=list_inst CBRACE {
        assert($li_else.tree != null);
        if(else_tree.getLast() == null){
                $tree.setElseBranch($li_else.tree);
            }
            else{
                ((IfThenElse)(else_tree.getLast())).setElseBranch($li_else.tree);
                $tree.setElseBranch(else_tree);
            }
        }
      )?
    ;

list_expr returns[ListExpr tree]
@init   {
    $tree = new ListExpr();
        }
    : (e1=expr {
        assert($e1.tree != null);
        $tree.add($e1.tree);
        }
       (COMMA e2=expr {
        assert($e2.tree != null);
        $tree.add($e2.tree);
        }
       )* )?
    ;

expr returns[AbstractExpr tree]
    : assign_expr {
            assert($assign_expr.tree != null);
            $tree = $assign_expr.tree;
        }
    ;

assign_expr returns[AbstractExpr tree]
    : e=or_expr (
        /* condition: expression e must be a "LVALUE" */ {
            if (! ($e.tree instanceof AbstractLValue)) {
                throw new InvalidLValue(this, $ctx);
            }
        }
        EQUALS e2=assign_expr {
            assert($e.tree != null);
            assert($e2.tree != null);
            $tree = new Assign((AbstractLValue)$e.tree, $e2.tree);
            setLocation($tree, $EQUALS);
        }
      | /* epsilon */ {
            assert($e.tree != null);
            $tree = $e.tree;
        }
      )
    ;

or_expr returns[AbstractExpr tree]
    : e=and_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    | e1=or_expr OR e2=and_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Or($e1.tree, $e2.tree);
            setLocation($tree, $OR);
       }
    ;

and_expr returns[AbstractExpr tree]
    : e=eq_neq_expr {
            assert($e.tree != null);
            $tree=$e.tree;
        }
    |  e1=and_expr AND e2=eq_neq_expr {
            assert($e1.tree != null);                         
            assert($e2.tree != null);
            $tree = new And($e1.tree, $e2.tree);
            setLocation($tree, $AND);
        }
    ;

eq_neq_expr returns[AbstractExpr tree]
    : e=inequality_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    | e1=eq_neq_expr EQEQ e2=inequality_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Equals($e1.tree, $e2.tree);
            setLocation($tree, $EQEQ);
        }
    | e1=eq_neq_expr NEQ e2=inequality_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new NotEquals($e1.tree, $e2.tree);
            setLocation($tree, $NEQ);

        }
    ;

inequality_expr returns[AbstractExpr tree]
    : e=sum_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    | e1=inequality_expr LEQ e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new LowerOrEqual($e1.tree, $e2.tree);
            setLocation($tree, $LEQ);

        }
    | e1=inequality_expr GEQ e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new GreaterOrEqual($e1.tree, $e2.tree);
            setLocation($tree, $GEQ);
        }
    | e1=inequality_expr GT e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Greater($e1.tree, $e2.tree);
            setLocation($tree, $GT);
        }
    | e1=inequality_expr LT e2=sum_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Lower($e1.tree, $e2.tree);
            setLocation($tree, $LT);
        }
    | e1=inequality_expr INSTANCEOF t=type {
            assert($e1.tree != null);
            assert($type.tree != null);
            $tree = new InstanceOf($e1.tree, $t.tree);
            setLocation($tree, $INSTANCEOF);
        }
    ;


sum_expr returns[AbstractExpr tree]
    : e=mult_expr {
            assert($e.tree != null);
            $tree = $e.tree;        
        }
    | e1=sum_expr PLUS e2=mult_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Plus($e1.tree, $e2.tree);
            setLocation($tree, $PLUS);
        }
    | e1=sum_expr MINUS e2=mult_expr {
            assert($e1.tree != null);
            assert($e2.tree != null);
            $tree = new Minus($e1.tree, $e2.tree);
            setLocation($tree, $MINUS);
        }
    ;

mult_expr returns[AbstractExpr tree]
    : e=unary_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    | e1=mult_expr TIMES e2=unary_expr {
            assert($e1.tree != null);                                         
            assert($e2.tree != null);
            $tree = new Multiply($e1.tree, $e2.tree);
            setLocation($tree, $TIMES);
        }
    | e1=mult_expr SLASH e2=unary_expr {
            assert($e1.tree != null);                                         
            assert($e2.tree != null);
            $tree = new Divide($e1.tree, $e2.tree);
            setLocation($tree, $SLASH);
        }
    | e1=mult_expr PERCENT e2=unary_expr {
            assert($e1.tree != null);                                                                          
            assert($e2.tree != null);
            $tree = new Modulo($e1.tree, $e2.tree);
            setLocation($tree, $PERCENT);
        }
    ;

unary_expr returns[AbstractExpr tree]
    : op=MINUS e=unary_expr {
            assert($e.tree != null);
            $tree = new UnaryMinus($e.tree);
            setLocation($tree, $op);
        }
    | op=EXCLAM e=unary_expr {
            assert($e.tree != null);
            $tree = new Not($e.tree);
            setLocation($tree, $op);
        }
    | select_expr {
            assert($select_expr.tree != null);
            $tree = $select_expr.tree;
        }
    ;

select_expr returns[AbstractExpr tree]
    : e=primary_expr {
            assert($e.tree != null);
            $tree = $e.tree;
        }
    | e1=select_expr DOT i=ident {
            assert($e1.tree != null);
            assert($i.tree != null);
        }
        (OPARENT args=list_expr CPARENT {
            // we matched "e1.i(args)"
            assert($args.tree != null);
            $tree = new MethodCall($e1.tree, $i.tree, $args.tree);
            setLocation($tree, $DOT);
        }
        | /* epsilon */ {
            // we matched "e.i"$
            $tree = new Selection($e1.tree, $i.tree);
            setLocation($tree, $DOT);
        }
        )
    ;

primary_expr returns[AbstractExpr tree]
    : ident {
            assert($ident.tree != null);
            $tree = $ident.tree;
        }
    | m=ident OPARENT args=list_expr CPARENT {
            assert($args.tree != null);
            assert($m.tree != null);
            //TODO new Method(m, args)
        }
    | OPARENT expr CPARENT {
            assert($expr.tree != null);
            $tree = $expr.tree;
        }
    | READINT OPARENT CPARENT {
        $tree = new ReadInt();
        setLocation($tree, $READINT);
        }
    | READFLOAT OPARENT CPARENT {
        $tree = new ReadFloat();
        setLocation($tree, $READFLOAT);
        }
    | NEW id=ident OPARENT CPARENT {
            assert($id.tree != null);
            $tree = new New($id.tree);
            setLocation($tree, $NEW);
        }
    | OPARENT tp=type c=CPARENT OPARENT exp=expr CPARENT {
            assert($tp.tree != null);
            assert($exp.tree != null);
            $tree = new Cast($tp.tree, $exp.tree);
            setLocation($tree,$c);
        }
    | literal {
            assert($literal.tree != null);
            $tree = $literal.tree;
        }
    ;

type returns[AbstractIdentifier tree]
    : ident {
            assert($ident.tree != null);
            $tree = $ident.tree;
        }
    ;

literal returns[AbstractExpr tree]
    : INT {
        try {
            $tree = new IntLiteral(Integer.parseInt($INT.text));
            setLocation($tree, $INT);
        } catch (NumberFormatException e){
            throw new IntNotCodableException(this, $INT);
        }

        } 
    | fd=FLOAT {
        try {
            $tree = new FloatLiteral(Float.parseFloat($fd.text));
            setLocation($tree, $fd);
        } catch (IllegalArgumentException e){
            throw new FloatNotCodableException(this, $fd);
        } 

        }
    | STRING {
        $tree = new StringLiteral($STRING.text.substring(1, $STRING.text.length() - 1)); // Remove quotes
        setLocation($tree, $STRING);
        }
    | TRUE {
        $tree = new BooleanLiteral(true);
        setLocation($tree, $TRUE);
        }
    | FALSE {
        $tree = new BooleanLiteral(false);
        setLocation($tree, $FALSE);
        }
    | THIS {
        $tree = new This();
        setLocation($tree, $THIS);
        }
    | NULL {
        $tree = new Null();
        setLocation($tree, $NULL);
        }
    ;

ident returns[AbstractIdentifier tree]
    : id=IDENT {
        $tree = new Identifier(symbolTable.create($id.text));
        setLocation($tree, $id);
        }
    ;

multi_line_string returns[String text, Location location]
    : s=STRING {
            $text = $s.text;
            $location = tokenLocation($s);
        }
    | s=MULTI_LINE_STRING {
            $text = $s.text;
            $location = tokenLocation($s);
        }
    ;


/****     Class related rules     ****/

list_classes returns[ListDeclClass tree]
@init {
    $tree = new ListDeclClass();
}
    : (c1=class_decl {
        $tree.add($c1.tree);
    })*
    ;

class_decl returns[AbstractDeclClass tree]
    : CLASS name=ident superclass=class_extension OBRACE body=class_body CBRACE {
        assert($name.tree != null);
        $tree = new DeclClass($name.tree, $superclass.tree, $body.treefield, $body.treemethod);
        setLocation($tree, $CLASS);
    }
    ;

class_extension returns[AbstractIdentifier tree]
    : EXTENDS parent=ident {
        assert($parent.tree != null);
        $tree = $parent.tree;
    }
    | /* epsilon */ {
        $tree = null;
    }
    ;

class_body returns[ListDeclField treefield, ListDeclMethod treemethod]
@init {
    $treefield = new ListDeclField();
    $treemethod = new ListDeclMethod();
}
    : (m=decl_method {
        $treemethod.add($m.tree);
    }
    | f=decl_field_set {
        for (AbstractDeclField field : $f.tree.getList()){
            $treefield.add(field);
        }
    })*
    ;

decl_field_set returns[ListDeclField tree]
@init {
    $tree = new ListDeclField();
}
    : v=visibility t=type list=list_decl_field {
        for (AbstractDeclField field : $list.tree.getList()) {
            field.setType($t.tree);
            field.setVisibility($v.tree);
            $tree.add(field);
        }
    } SEMI
    ;

visibility returns[Visibility tree]
    : /* epsilon */ {
        $tree = Visibility.PUBLIC;
    }
    | PROTECTED {
        $tree = Visibility.PROTECTED;
    }
    ;

list_decl_field returns[ListDeclField tree]
@init {
    $tree = new ListDeclField();
}
    : f1=decl_field {
        $tree.add($f1.tree);
    } (COMMA f2=decl_field {
        $tree.add($f2.tree);
    })*
    ;

decl_field returns[AbstractDeclField tree]
@init {
    AbstractInitialization init_tree = new NoInitialization();
}
    : name=ident {
        $tree = new DeclField($name.tree, init_tree);
        setLocation($tree, $name.start);
    } (EQUALS value=expr {
        assert($value.tree != null);
        init_tree = new Initialization($value.tree);
        setLocation(init_tree, $name.start);
        $tree = new DeclField($name.tree, init_tree);
        setLocation($tree, $name.start);
    })?
    ;

decl_method returns[AbstractDeclMethod tree]
@init {
    AbstractMethodBody body;
}
    : returnType=type name=ident OPARENT params=list_params CPARENT
      (action=block {
        body = new MethodBody(action.decls, action.insts);
        setLocation(body, $OPARENT);
      }
      | ASM OPARENT code=multi_line_string CPARENT SEMI {
        body = new MethodAsmBody($code.text);   
        setLocation(body, $ASM);
      }){
            $tree = new DeclMethod($returnType.tree, $name.tree, $params.tree, body);
            setLocation($tree, $returnType.start);
        }
    ;

list_params returns[ListDeclParam tree]
@init {
    $tree = new ListParam();
}
    : (p1=param {
        $tree.add($p1.tree);
    } (COMMA p2=param {
        $tree.add($p2.tree);
    })*)?
    ;

param returns[AbstractDeclParam tree]
    : t=type name=ident {
        $tree = new DeclParam(t.tree, name.tree);
        setLocation($tree, $name.start);
    }
    ;
